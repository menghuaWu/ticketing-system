services:
  frontend:
    build: 
      context: ../frontend 
    container_name: nuxt-app
    ports:
      - "3000:3000" 
    environment:
      - NODE_ENV=production
      - API_BASE=http://gatewayapi:8080/api
    working_dir: /app 
    networks:
      - dockernet

  mssql:
    image: mcr.microsoft.com/mssql/server:latest
    container_name: ubuntu-sqlserver
    restart: always
    environment:
      ConnectionStrings__MSSQL : "Server=ubuntu-sqlserver,1433;Database=TicketDB;User Id=sa;Password=@Ff04291001;TrustServerCertificate=True"
      SA_PASSWORD: "@Ff04291001"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    networks:
      - dockernet
  
  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    restart: always
    environment:
      MongoDbSettings__ConnectionString : mongodb://mongodb:27017
      MongoDbSettings__DatabaseName : TicketDB
      MongoDbSettings__CollectionName : Tickets
    networks:
      - dockernet

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    restart: always
    networks:
      - dockernet

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - dockernet

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # 這裡啟用自動創建 Topic
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s
    networks:
      - dockernet
  kafka-init:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    command: [ "sh", "-c", "sh /kafka-init.sh" ]
    volumes:
      - ./kafka-init.sh:/kafka-init.sh
    networks:
      - dockernet
volumes:
  mssql_data:
  mongo_data:

networks:
  dockernet:
    external: true